<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Microsoft.Maps.Unity</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Maps.Unity.MapRenderer">
      <summary>
            Includes RayCasting specific logic for the MapRenderer.
            </summary>
      <summary>
            The MapRenderer component can be applied to a GameObject to manage streaming and rendering of map data.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapRenderer.LocalMapDimension">
      <summary>
            The width and length of the map object in its local coordinate system before any transforms are applied.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRenderer.Raycast(UnityEngine.Ray,Microsoft.Maps.Unity.MapRendererRaycastHit@)">
      <summary>
            Casts a ray against the map and returns detailed information about the hitpoint.
            </summary>
      <returns>True when the ray intersects the map, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRenderer.Raycast(UnityEngine.Ray,Microsoft.Maps.Unity.MapRendererRaycastHit@,System.Single)">
      <summary>
            Casts a ray against the map and returns detailed information about the hitpoint.
            </summary>
      <returns>True when the ray intersects the map, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRenderer.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,Microsoft.Maps.Unity.MapRendererRaycastHit@)">
      <summary>
            Casts a ray against the map and returns detailed information about the hitpoint.
            </summary>
      <returns>True when the ray intersects the map, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRenderer.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,Microsoft.Maps.Unity.MapRendererRaycastHit@,System.Single)">
      <summary>
            Casts a ray against the map and returns detailed information about the hitpoint.
            </summary>
      <returns>True when the ray intersects the map, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapRenderer.SetMapScene(Microsoft.Maps.Unity.MapScene,Microsoft.Maps.Unity.MapSceneAnimationKind)">
      <summary>
            Sets the MapRenderer's view to reflect the new MapScene. A MapSceneAnimationKind may also be specified.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.BingMapsKey">
      <summary>
            The key used to enable Bing maps services. Must be set to a valid key before the MapRenderer is usable.
            </summary>
      <remarks>
            Sign up for a key at <see href="https://www.bingmapsportal.com">Bing Maps Portal</see>.
            </remarks>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.ShowMapDataInEditor">
      <summary>
            If true, during edit mode shows map data. Data usage in the editor will apply to the specified Bing maps key.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.Copyright">
      <summary>
            The copyrights and attribution text, which may change based on the current view of the MapRenderer.
            This string must be displayed near the associated MapRenderer.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.MapEdgeColor">
      <summary>
            The color of the map edge.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.MapEdgeColorFadeDistance">
      <summary>
            Starting at the map edge, this value is the distance normalized from the map dimension over which the edge color is faded.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.Center">
      <summary>
            Center of the map.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.ZoomLevel">
      <summary>
            Zoom level. Lower values are more zoomed out. Higher values are more zoomed in.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.MinimumZoomLevel">
      <summary>
            The minimum zoom level to enforce on the map. 1.0 is the smallest possible zoom level value, and 20.0 is the largest.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.MaximumZoomLevel">
      <summary>
            The maximum zoom level to enforce on the map. 1.0 is the smallest possible zoom level value, and 20.0 is the largest.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.ElevationBaseline">
      <summary>
            The altitude in WGS84 meters in which the map's terrain surface has been negatively offset.
            </summary>
      <remarks>
            As the terrain data changes, the map will align to the lowest minimum elevation for the current view. This allows for the map
            surface to still be visisble in high-altitude areas. If this elevation baseline was not accounted for in these high-altitude
            views, then the map surface would be too tall, and likely unviewable.
             </remarks>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.MapDimension">
      <summary>
            The width and length of the map object with global scale applied.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.LocalMapHeight">
      <summary>
            The height of the map object in its local coordinate system before any transforms are applied.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.MapHeight">
      <summary>
            The height of the map with global scale applied, i.e. LocalMapHeight * transform.lossyScale.y.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.ActiveMapPins">
      <summary>
            Array of MapPins currently visible within the Bounds of the map.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.Bounds">
      <summary>
            The LatLon bounds of the current map view.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapRenderer.MapLayers">
      <summary>
            The MapLayers associated with this MapRenderer.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapRendererRaycastHit">
      <summary>
            Structure used to get information back form a raycast of a MapRenderer.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapRendererRaycastHit.Distance">
      <summary>
            Distance to the hit point from the origin of the raycast.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapRendererRaycastHit.Point">
      <summary>
            The impact point in world space where the ray hit the MapRenderer.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapRendererRaycastHit.Normal">
      <summary>
            The normal vector of the triangle that was hit.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapRendererRaycastHit.Location">
      <summary>
            The geographic location where the ray hit the MapRenderer.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel">
      <summary>
            MapScene positioned on a MapLabel and a zoom level.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel.#ctor(Microsoft.Maps.Unity.MapLabel,System.Single)">
      <summary>
            Constructs a MapSceneOfLocationAndZoomLevel from the specified location and zoom level.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel.GetLocationAndZoomLevel(Microsoft.Geospatial.LatLon@,System.Double@)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel.MapLabel">
      <summary>
            The MapLabel.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapSceneOfLabelAndZoomLevel.ZoomLevel">
      <summary>
            The final zoom level.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.Pinnable">
      <summary>
            Encapsulates a Unity component that can be positioned on a map.
            This should not be derived from directly. Use MapPin instead.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.Pinnable.UseRealWorldScale">
      <summary>
            If true, the ScaleCurve is relative to the real-world scale at a given zoom level. As the map zooms out, size falls off
            exponentially. If false, the ScaleCurve represents the direct scale of the MapPin at a given zoom level.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.Pinnable.ScaleCurve">
      <summary>
            The scale of the Pinnable relative to ZoomLevel.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapLabelLayer">
      <summary>
            This MapLayer can be added to a MapRenderer GameObject to enable labeling of the map. Only one MapLabelLayer is allowed on a given
            GameObject. Also, in order for the MapLabelLayer to function properly, a LabelPrefab must be set before the first Update().
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapLabelLayer.MapLabelPrefab">
      <summary>
            The GameObject used to replicate labels into the map.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.FontStyle">
      <summary>
            The style of the font.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.FontStyle.Normal">
      <summary>
            Default font style.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.FontStyle.Italic">
      <summary>
            Slanted font style.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.FontWeight">
      <summary>
            The weight of the font.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.FontWeight.Normal">
      <summary>
            Default weight.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.FontWeight.Bold">
      <summary>
            Thick stroked font weight.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.Style">
      <summary>
            Encapsulate recommended styling information about a label.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Style.Rank">
      <summary>
            Gets the recommended ranking of the label which can be used to determine label size.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Style.Color">
      <summary>
            Gets the recommended color of the label.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Style.FontStyle">
      <summary>
            Gets the recommended style of the the label.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Style.FontWeight">
      <summary>
            Gets the recommended weight of the label.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapLayer">
      <summary>
            Base class for any type of MapLayer. A MapLayer instance can only be associated with a single MapRenderer.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapLayer.LayerName">
      <summary>
            The name of the MapLayer. This may be useful for disambiguating multiple layers on the same GameObject.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.ClusterMapPin">
      <summary>
            Represents a cluster of MapPins at the specified level of detail.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ClusterMapPin.LevelOfDetail">
      <summary>
            The level of detail represented by this cluster.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ClusterMapPin.Size">
      <summary>
            The number of pins in this cluster.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.ClusterMapPin.Location">
      <summary>
            The location of the MapPin.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapLabel">
      <summary>
            This component is used to transfer labeling information to a GameObject.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapLabel.Text">
      <summary>
            Gets or sets the test of the label.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapLabel.Style">
      <summary>
            Gets or sets the recommended styling information for this label.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapPinLayer">
      <summary>
            Maintains a collection of MapPins. Supports clustering. This layer is queried by the associated MapRenderer to get the
            MapPins or clusters in the map's current view.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapPinLayer.MapPins">
      <summary>
            All MapPins associated with this MapPinLayer.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapPinLayer.IsClusteringEnabled">
      <summary>
            True if the MapPins in this data source should be clustered. Note, if this is set to true, it is expected that a prefab
            has been provided to ClusterMapPinPrefab.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapPinLayer.ClusterThreshold">
      <summary>
            If the number of pins in a spatial region exceed the ClusterThreshold, a single cluster MapPin will be rendered instead.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapPinLayer.ClusterMapPinPrefab">
      <summary>
            The prefab to use for clusters.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapSceneAnimationKind">
      <summary>
            Specifies the animation to use when setting a MapScene.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapSceneAnimationKind.None">
      <summary>
            No animation.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapSceneAnimationKind.Linear">
      <summary>
            A linear animation.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapSceneAnimationKind.Bow">
      <summary>
            A parabolic animation.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.WaitForMapSceneAnimation">
      <summary>
            Suspends coroutine execution once the associated MapScene animation has been completed or cancelled.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.WaitForMapSceneAnimation.keepWaiting">
      <summary>
            Returns false once the animation has been completed or cancelled.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.Intersection">
      <summary>
            Helpers to do intersection tests.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Intersection.Intersect(Microsoft.Geospatial.VectorMath.Ray3D@,Microsoft.Geospatial.VectorMath.Vector3D@,Microsoft.Geospatial.VectorMath.Vector3D@,Microsoft.Geospatial.VectorMath.Vector3D@,System.Double@)">
      <summary>
            Intersects a ray and triangle.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Intersection.Intersect(UnityEngine.Ray@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,System.Single@)">
      <summary>
            Intersects a ray and triangle.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Intersection.Intersect(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@,System.Single@)">
      <summary>
            Intersects a line and a plane.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.ObservableList`1">
      <summary>
            A list with notifications for add and remove.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.ObservableList`1.OnItemAdded">
      <summary>
            Action that handles a single item being added to the last.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.ObservableList`1.OnRangeAdded">
      <summary>
            Action that handles a range of items being added to the list.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.ObservableList`1.OnItemRemoved">
      <summary>
            Action that handles a single item being removed from the list.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.ObservableList`1.OnRangeRemoved">
      <summary>
            Action that handles a range of items being removed from the list.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Contains(`0)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.CopyTo(`0[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.IndexOf(`0)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Insert(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Maps.Unity.ObservableList`1.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Maps.Unity.ObservableList`1.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Maps.Unity.ObservableList`1.Count">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Maps.Unity.ObservableList`1.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="T:Microsoft.Maps.Unity.MapConstants">
      <summary>
            Utility map constant values.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapConstants.MinimumZoomLevel">
      <summary>
            Lowest zoom level for the map.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapConstants.MaximumZoomLevel">
      <summary>
            Highest zoom level for the map.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapPin">
      <summary>
            A MapPin can be used to pin a GameObject to the map at a specified coordinate.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapPin.AltitudeReference">
      <summary>
            The altitude reference to use for the location. By default, uses a Surface altitude reference.
            If unsure what altitude reference to use, stick with the default. If data is known to be in a specific reference system,
            e.g. Ellipsoid, then this value must be updated accordingly.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapPin.Altitude">
      <summary>
            The altitude above the specified <see cref="F:Microsoft.Maps.Unity.MapPin.AltitudeReference" />.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.MapPin.LocationChanged">
      <summary>
            Action that is invoked when the Location of the MapPin is changed.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.MapPin.Location">
      <summary>
            The location of the MapPin.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.MapScene">
      <summary>
            MapScene is used for changing and animating the map view.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.MapScene.GetLocationAndZoomLevel(Microsoft.Geospatial.LatLon@,System.Double@)">
      <summary>
            Returns the location and zoom level for the MapScene.
            </summary>
      <remarks>
            Derived classes should use this method to calculate the target location and zoom level.
            </remarks>
    </member>
    <member name="T:Microsoft.Maps.Unity.Cache`2">
      <summary>
            Cache class for dynamic types.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Cache`2.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor
            </summary>
      <param name="maxValues">Max cache size</param>
      <param name="maxWeakCacheValues">Max weak reference cache size. This size can be large</param>
    </member>
    <member name="M:Microsoft.Maps.Unity.Cache`2.ContainsKey(`0)">
      <summary>
            Returns true if the key is contained in the Cache.
            If IsWeakCacheEnabled = true, this checks weak reference cache and promote to _cache if alive.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Cache`2.TryGet(`0,`1@)">
      <summary>
            Gets the value for the associated key.
            </summary>
      <param name="key">The key of the cached item to try to get</param>
      <param name="value">The value for the key found in the cache</param>
      <returns>Returns true if the value for the key exists</returns>
    </member>
    <member name="M:Microsoft.Maps.Unity.Cache`2.Get(`0)">
      <summary>
            Gets the value for the associated key. Returns null if the value does not exist in the cache.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Cache`2.GetAll">
      <summary>
            Returns all values in the cache.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Cache`2.Add(`0,`1,System.Boolean)">
      <summary>
            Adds the specified key and value to the cache.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Cache`2.Clear">
      <summary>
            Removes all entries from the cache.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.Cache`2.Clear(System.Collections.Generic.List{`1}@)">
      <summary>
            Removes all entries from the cache. Returns all values in a list.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Cache`2.Generation">
      <summary>
            The generation is incremented each time there is a change to the cache, i.e. an item is added or removed.
            </summary>
    </member>
    <member name="P:Microsoft.Maps.Unity.Cache`2.IsWeakCacheEnabled">
      <summary>
            Gets a value indicating whether this cache supports weak reference cache.
            </summary>
    </member>
    <member name="T:Microsoft.Maps.Unity.LatLonWrapper">
      <summary>
            Serializable wrapper class for a LatLon.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.LatLonWrapper.Latitude">
      <summary>
            Gets the latitude in degrees.
            </summary>
    </member>
    <member name="F:Microsoft.Maps.Unity.LatLonWrapper.Longitude">
      <summary>
            Gets the longitude in degrees.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.#ctor(Microsoft.Geospatial.LatLon)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.Unity.LatLonWrapper" /> class.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Maps.Unity.LatLonWrapper" /> class.
            </summary>
      <param name="latitude">The latitude in degrees.</param>
      <param name="longitude">The longitude in degrees.</param>
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.ToLatLon">
      <summary>
            Converts to a LatLon. Wraps longitude so that values always are between -180 and +180.
            </summary>
    </member>
    <member name="M:Microsoft.Maps.Unity.LatLonWrapper.ToString">
      <summary>
            String representation of the LatLonWrapper.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.AltitudeReference">
      <summary>
            The altitude reference system to be used in defining a geographic shape.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.AltitudeReference.Ellipsoid">
      <summary>
            The altitude reference is based on an ellipsoid which is a mathematical approximation of the shape of the Earth.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.AltitudeReference.Terrain">
      <summary>
            The altitude reference is based on distance above terrain or ground level.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.AltitudeReference.Surface">
      <summary>
            The altitude reference is based on the distance above the tallest surface structures, such as buildings, trees, roads,
            etc., above terrain or ground level.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.GeoBoundingBox">
      <summary>
            Defines a rectangular area in Latitude and Longitude coordinates.
            </summary>
      <remarks>
            The direction that the GeoBoundingBox wraps longitudinally is determined by the longitude of the left and right points. If the
            BottomLeft longitude is greater than the TopRight longitude, the GeoBoundingBox wraps across the anti-meridian.
            </remarks>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.#ctor(Microsoft.Geospatial.LatLon,Microsoft.Geospatial.LatLon)">
      <summary>
            Constructs a GeoBoundingBox from the bottom left and top right locations.
            </summary>
      <param name="bottomLeft">The bottom left coordinate of the bounding GeoBoundingBox</param>
      <param name="topRight">The top right coordinate of the bounding GeoBoundingBox</param>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Intersects(Microsoft.Geospatial.LatLon)">
      <summary>
            Returns true if the specified location is in this GeoBoundingBox or intersects the edge of this GeoBoundingBox.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Intersects(Microsoft.Geospatial.GeoBoundingBox)">
      <summary>
            Returns true if the specified GeoBoundingBox intersects this GeoBoundingBox. This is an inclusive check.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.ToMercatorBoundingBox">
      <summary>
            Returns the MercatorBoundingBox for this BoundingBox.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.Equals(Microsoft.Geospatial.GeoBoundingBox)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.op_Equality(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.GeoBoundingBox)">
      <summary>
            Comapres the GeoBoundingBoxes for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.op_Inequality(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.GeoBoundingBox)">
      <summary>
            Comapres the GeoBoundingBoxes for inequality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.GeoBoundingBox.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.GeoBoundingBox.BottomLeft">
      <summary>
            The minimum coordinate for the GeoBoundingBox.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.GeoBoundingBox.TopRight">
      <summary>
            The maximum coordinate for the GeoBoundingBox.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.GeoBoundingBox.Center">
      <summary>
            The center of the GeoBoundingBox.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.Constants">
      <summary>
            Common values used by various Geospatial classes.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.Constants.MinimumMercatorLatitudeInRadians">
      <summary>
            Minimum Latitude. Anything below this will be pinned.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.Constants.MaximumMercatorLatitudeInRadians">
      <summary>
            Maximum Latitude. Anything above this will be pinned.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.LatLon">
      <summary>
            Represents Latitude + Longitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MinimumLatitude">
      <summary>
            The minimum valid latitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MaximumLatitude">
      <summary>
            The maximum valid latitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MinimumLongitude">
      <summary>
            The minimum valid longitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MaximumLongitude">
      <summary>
            The maximum valid longitude.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MinValue">
      <summary>
            A Coordinate2D with minimum values for X and Y.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.MaxValue">
      <summary>
            A Coordinate2D with maximum values for X and Y.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.LatLon.SizeInBytes">
      <summary>
            Size of this struct.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.#ctor(System.Double,System.Double)">
      <summary>
            Constructs a LatLon from the specified latitude and longitude.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.#ctor(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Constructs a LatLon from the specified Mercator coordinate.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.WrapLongitude(System.Double)">
      <summary>
            Wraps a longitudinal value to the -180 to 180 range.
            </summary>
      <param name="longitude">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.IsOnTheEdgeOfTheWorld">
      <summary>
            Check if a vertex lies on the edge of the world, from -180 to 180 longitude, and from -90 to 90 latitude
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.op_Equality(Microsoft.Geospatial.LatLon,Microsoft.Geospatial.LatLon)">
      <summary>
            Comapres the LatLons for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.op_Inequality(Microsoft.Geospatial.LatLon,Microsoft.Geospatial.LatLon)">
      <summary>
            Comapres the LatLons for inequality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Equals(Microsoft.Geospatial.LatLon)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Equals(Microsoft.Geospatial.LatLon@)">
      <summary>
            Returns true if the specified LatLon equals this LatLon.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.ApproximatelyEquals(Microsoft.Geospatial.LatLon,System.Double)">
      <summary>
            Determines whether two LatLon coordinates are considered equal based on a precision threshold.
            https://msdn.microsoft.com/en-us/library/ya2zha7s(v=vs.110).aspx
            The default tolerance is set to 9 decimal places where the precision is approximately equal to
            110 microns, since 10 decimal places or more indicates a computer or calculator was used.
            In our applications, it's likely to have come from calls to SQL MakeValid().
            </summary>
      <returns>True if the coordinates are considered equal, false otherwise.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Write(System.IO.BinaryWriter)">
      <summary>
            Commit their contents to binary storage.
            </summary>
      <param name="writer">The writer to which it writes the content</param>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Read(System.IO.BinaryReader)">
      <summary>
            Hydrate the contents from binary storage. Expected order of data is Longitude, Latitude.
            </summary>
      <param name="reader">The reader from which it reads the content</param>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.RadiansToDegrees(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.DegreesToRadians(System.Double)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.Wgs84LatitudeToMercator(System.Double)">
      <summary>
            Converts from WGS 84 latitudes in radians (-PI/2...PI/2) to Mercator unit latitude value (-0.5...0.5).
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.MercatorToWgs84Latitude(System.Double)">
      <summary>
            Converts from Mercator unit latitude value (-0.5...0.5) to WGS 84 latitudes in radians (-PI/2...PI/2).
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLon.ToMercatorPosition">
      <summary>
            Returns the Mercator position x,y where x and y are in the range [-0.5,0.5].
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.IsValid">
      <summary>
            Returns true if the specified coordinate is valid.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.LongitudeInDegrees">
      <summary>
            The longitude in degrees.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.LatitudeInDegrees">
      <summary>
            The latitude in degrees.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.LongitudeInRadians">
      <summary>
            Gets the latitude value, converted to radians.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLon.LatitudeInRadians">
      <summary>
            Gets the longitude value, converted to radians.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.LatLonAlt">
      <summary>
            A latitude, longitude, and altitude.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Constructs a LatLonAlt.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.#ctor(Microsoft.Geospatial.LatLon@,System.Double)">
      <summary>
            Constructs a LatLonAlt.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.Equals(Microsoft.Geospatial.LatLonAlt)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.op_Equality(Microsoft.Geospatial.LatLonAlt,Microsoft.Geospatial.LatLonAlt)">
      <summary>
            Compares the LatLonAlts for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.op_Inequality(Microsoft.Geospatial.LatLonAlt,Microsoft.Geospatial.LatLonAlt)">
      <summary>
            Compares the LatLonAlts for inequality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.LatLonAlt.ToString">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.LatLonAlt.LatLon">
      <summary>
            Degrees, YX
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLonAlt.AltitudeInMeters">
      <summary>
            Meters, Z. This is always relative to WGS84 Datum.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLonAlt.LatitudeInDegrees">
      <summary>
            The latitude in degrees.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.LatLonAlt.LongitudeInDegrees">
      <summary>
            The longitude in degrees.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.MercatorBoundingBox">
      <summary>
            Defines a rectangular area in Mercator coordinates.
            <br /><br />
            In Mercator coordiantes, X coordinates are longitudinal values and Y coordinates are latitudinal values.
            <br /><br />
            The direction that the MercatorBoundingBox wraps longitudinally is determined by the X cordinate of the left and right points. If
            the BottomLeft X coordinate is greater than the TopRight X coordinate, the MercatorBoundingBox wraps across the anti-meridian.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.#ctor(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Constructs a MercatorBoundingBox from a bottom left and top right coordinate.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Intersects(Microsoft.Geospatial.LatLon)">
      <summary>
            Returns true if this MercatorBoundingBox intersects the specified LatLon.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Intersects(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Returns true if this MercatorBoundingBox intersects the specified Mercator coordinate.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Intersects(Microsoft.Geospatial.MercatorBoundingBox)">
      <summary>
            Returns true if this MercatorBoundingBox intersects the specified MercatorBoundingBox.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.ToGeoBoundingBox">
      <summary>
            Converts this MercatorBoundingBox to a lat-lon Box.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Equals(Microsoft.Geospatial.MercatorBoundingBox)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.Equals(Microsoft.Geospatial.MercatorBoundingBox@)">
      <summary>
            Returns true if the specified MercatorBoundingBox is equal to this MercatorBoundingBox.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.op_Equality(Microsoft.Geospatial.MercatorBoundingBox,Microsoft.Geospatial.MercatorBoundingBox)">
      <summary>
            Compares the MercatorBoundingBoxes for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.MercatorBoundingBox.op_Inequality(Microsoft.Geospatial.MercatorBoundingBox,Microsoft.Geospatial.MercatorBoundingBox)">
      <summary>
            Compares the MercatorBoundingBoxes for inequality.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.MercatorBoundingBox.BottomLeft">
      <summary>
            The bottom left coordinate for the MercatorBoundingBox
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.MercatorBoundingBox.TopRight">
      <summary>
            The top right coordinate for the MercatorBoundingBox.
            </summary>
    </member>
    <member name="P:Microsoft.Geospatial.MercatorBoundingBox.Center">
      <summary>
            The center of the MercatorBoundingBox in Mercator coordinates.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.TileId">
      <summary>
             Encompasses a single Tile Id
            
             At level of detail 0, there is one tile with a value of 1 ("").
             At level of detail 1, there are four tiles with values of 4 ("0"), 5 ("1"), 6 ("2"), 7 ("3").
             At level of detail 2, there are sixteen tiles with value starting at 16 ("00").
             </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileId.Null">
      <summary>
            The null tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct with
            a value.
            </summary>
      <param name="value">Value of the Tile Id.</param>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.#ctor(Microsoft.Geospatial.LatLon,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct from a location.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.#ctor(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct from a Mercator position.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.FromKey(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileId" /> struct from
            a string tile key.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.ToKey">
      <summary>
            Gets the tile id as a string tile key.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetWest">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> to the West of this one,
            wrapping around the earth.
            </summary>
      <returns>
        <see cref="T:Microsoft.Geospatial.TileId" /> to the West.</returns>
      <remarks>To navigate any direction, you walk through the pairs of
            bits and decrementing or incrementing until you get one that
            doesn't overflow.  What is actually happening is that you're
            decrementing or incrementing the X or Y offset of the TileId,
            which are bit interleaved.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetEast">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> to the East of this one,
            wrapping around the earth.
            </summary>
      <returns>
        <see cref="T:Microsoft.Geospatial.TileId" /> to the East.</returns>
      <remarks>See CalculateWest for remarks.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetNorth">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> to the North of this one.
            </summary>
      <returns>
        <see cref="T:Microsoft.Geospatial.TileId" /> to the North, or
            <see cref="F:Microsoft.Geospatial.TileId.Null" /> if this tile is on the top row.</returns>
      <remarks>See CalculateWest for remarks.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetSouth">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> to the South of this one.
            </summary>
      <returns>
        <see cref="T:Microsoft.Geospatial.TileId" /> to the South, or
            <see cref="F:Microsoft.Geospatial.TileId.Null" /> if this tile is on the bottom row.
            </returns>
      <remarks>See CalculateWest for remarks.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetParent">
      <summary>
            Calculate the id of the tile that is one level of detail up from
            this tile.
            This method will return <see cref="F:Microsoft.Geospatial.TileId.Null" /> if the
            this tile has no parents.
            </summary>
      <returns>Parent tile id.</returns>
      <remarks>Basically we just shift right 2 bits to get the parent.
            There are some exceptions though.</remarks>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.TryGetParent(Microsoft.Geospatial.TileId@)">
      <summary>
            Try to calculate the id of the tile that is one level of detail up
            from this tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.TryGetChildren(Microsoft.Geospatial.TileId[]@)">
      <summary>
            Calculate the four child tile ids of this tile id.
            </summary>
      <returns>False if this tile is at the maximum level of
            detail.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.IsParentOf(Microsoft.Geospatial.TileId)">
      <summary>
            Returns whether or not the specified tile id is an immediate or
            distant child of this tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.IsParentOf(System.Collections.Generic.IEnumerable{Microsoft.Geospatial.TileId})">
      <summary>
            Returns whether or not any of the specified tile ids are an
            immediate or distant child of this tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.ToString">
      <summary>
            See <see cref="M:System.Object.ToString" />.
            </summary>
      <returns>The string representation of the numeric tile id.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.GetHashCode">
      <summary>
            See <see cref="M:System.Object.GetHashCode" />.
            </summary>
      <returns>A hash code for this class.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.Equals(System.Object)">
      <summary>
            See <see cref="M:System.Object.Equals(System.Object)" />.
            </summary>
      <param name="obj">Object to compare to this one.</param>
      <returns>True if the object equals this one.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.Equals(Microsoft.Geospatial.TileId)">
      <summary>
            Compares 2 TileIds
            </summary>
      <param name="other">The other TileId to compare to this one</param>
      <returns>True if they are the same</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.op_Equality(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileId)">
      <summary>
            Overloads the equality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.op_Inequality(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileId)">
      <summary>
            Overloads the inequality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileId.Write(System.IO.BinaryWriter)">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.TileId.Read(System.IO.BinaryReader)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.TileId.Value">
      <summary>
            Gets or sets the value of this tile.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.TileLevelOfDetail">
      <summary>
            Encapsulates the value of a tile level-of-detail.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.MinValue">
      <summary>
            The smallest Level of Detail that is supported by this class.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.MaxValue">
      <summary>
            The largest Level of Detail that is supported by this class.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.NullValue">
      <summary>
            Gets the level of detail value that is used to represent no level of detail.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.Null">
      <summary>
            Gets a level of detail instance for no level of detail.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.Max">
      <summary>
            Gets the maximum level of detail supported by the system.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.TileLevelOfDetail.Min">
      <summary>
            Gets the minimum level of detail supported by the system.
            This will be 0 as that is the minimum functional value even though -1 is used for null.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.#ctor(System.Int16)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.TileLevelOfDetail" /> struct.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.FindHighestLowerThan(Microsoft.Geospatial.TileLevelOfDetail,System.Collections.Generic.HashSet{Microsoft.Geospatial.TileLevelOfDetail})">
      <summary>
            find the highest valid Lod that is lower than the given one
            </summary>
      <returns>highest valid Lod that is lower than the given one</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Explicit(Microsoft.Geospatial.TileLevelOfDetail)~System.Int16">
      <summary>
            Allows explicit casting of <see cref="T:Microsoft.Geospatial.TileLevelOfDetail" /> into
            <see cref="T:System.Int16" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Explicit(System.Int16)~Microsoft.Geospatial.TileLevelOfDetail">
      <summary>
            Allows explicit casting of <see cref="T:System.Int16" /> into
            <see cref="T:Microsoft.Geospatial.TileLevelOfDetail" />.  This causes validation code to be
            run.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.TryParse(System.String,Microsoft.Geospatial.TileLevelOfDetail@)">
      <summary>
            Parses the level of detail from the specified string.
            </summary>
      <returns>True if successful</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Addition(Microsoft.Geospatial.TileLevelOfDetail,System.Int16)">
      <summary>
            Adds the level of details.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Subtraction(Microsoft.Geospatial.TileLevelOfDetail,System.Int16)">
      <summary>
            Subtracts the level of details.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_GreaterThan(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns true if the level of detail is greater than the other level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_LessThan(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns true if the level of detail is less than the other level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_GreaterThanOrEqual(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns true if the level of detail is greater than or equal to the other level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_LessThanOrEqual(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns true if the level of detail is less than or equal to the other level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Increment(Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Increments the level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Decrement(Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Decrements the level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Equality(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Overloads the equality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.op_Inequality(Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Overloads the inequality operator.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.Equals(System.Object)">
      <summary>
            Overrides <see cref="M:System.Object.Equals(System.Object)" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.GetHashCode">
      <summary>
            Overrides <see cref="M:System.Object.GetHashCode" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.Write(System.IO.BinaryWriter)">
      <summary>
            Writes this level of detail to the provided <see cref="T:System.IO.BinaryWriter" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.Read(System.IO.BinaryReader)">
      <summary>
            Populates this object with a value read in from the provided <see cref="T:System.IO.BinaryReader" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.ToString">
      <inheritdoc />
    </member>
    <member name="M:Microsoft.Geospatial.TileLevelOfDetail.CompareTo(Microsoft.Geospatial.TileLevelOfDetail)">
      <inheritdoc />
    </member>
    <member name="P:Microsoft.Geospatial.TileLevelOfDetail.Value">
      <summary>
            Gets or sets the value of this object.
            </summary>
    </member>
    <member name="T:Microsoft.Geospatial.TileOperations">
      <summary>
            Common operations related to TilePosition and TileId. For more basic operations using the underlying primitive types,
            see PrimitiveTileOperations.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetCoveredTileIds(Microsoft.Geospatial.MercatorBoundingBox,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns an enumeration of TileIds that cover the specified MercatorBoundingBox at the given level of detail. The enumeration
            starts in the upper left tile and ends at the lower right tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetCoveredTileIds(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns an enumeration of TileIds that cover the specified GeoBoundingBox at the given level of detail. The enumeration starts
            in the upper left tile and ends at the lower right tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetCoveredTilePositions(Microsoft.Geospatial.MercatorBoundingBox,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns an enumeration of TilePositions that cover the specified MercatorBoundingBox at the given level of detail. The
            enumeration starts in the upper left tile and ends at the lower right tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetCoveredTilePositions(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Returns an enumeration of TilePositions that cover the specified GeoBoundingBox at the given level of detail. The enumeration
            starts in the upper left tile and ends at the lower right tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetSubdomain(Microsoft.Geospatial.TileId)">
      <summary>
            Gets the subdomain of the tile, a value between 0 and 3. This id is relative to the parent tile. 0 is the first child, etc.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateGeoBoundingBox(Microsoft.Geospatial.TileId)">
      <summary>
            Calculates the bounding box for the provided tile id.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToGeoBoundingBox(Microsoft.Geospatial.TilePosition)">
      <summary>
            Converts the specified TilePosition to a Box.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToMercatorBoundingBox(Microsoft.Geospatial.TileId)">
      <summary>
            Converts the specified TileId to a MercatorBoundingBox.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToMercatorBoundingBox(Microsoft.Geospatial.TilePosition)">
      <summary>
            Converts the specified TilePosition to a MercatorBoundingBox.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateLevelOfDetail(Microsoft.Geospatial.TileId)">
      <summary>
            Calculates the TileLevelOfDetail for the TileId.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateTileBorders(Microsoft.Geospatial.TileId,Microsoft.Geospatial.LatLon)">
      <summary>
            Given a point, calculates if the point falls on a tile border or not.
            If the point is on a corner, then the point will fall into two sides.
            </summary>
      <param name="tileId">Tile id to test</param>
      <param name="point">point to test</param>
      <returns>Border bitmap if the point falls into border, none otherwise</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.CalculateTileBorders(Microsoft.Geospatial.GeoBoundingBox,Microsoft.Geospatial.LatLon)">
      <summary>
            Given a point, calculates if the point falls on a bounding box border or not.
            If the point is on a corner, then the point will fall into two sides.
            </summary>
      <param name="tileBoundingBox">Bounding box to test</param>
      <param name="point">point to test</param>
      <returns>Border bitmap if the point falls into border, none otherwise</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToTilePosition(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileLevelOfDetail)">
      <summary>
            Calculates our position using the specified level of detail rather than going to the trouble of extracting ours.
            </summary>
      <returns>Position of the tile as x,y,lod</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToTilePosition(Microsoft.Geospatial.TileId)">
      <summary>
            Converts a TileId to a TilePosition.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.ToTileId(Microsoft.Geospatial.TilePosition)">
      <summary>
            Calculates the <see cref="T:Microsoft.Geospatial.TileId" /> from a <see cref="T:Microsoft.Geospatial.TilePosition" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetParent(Microsoft.Geospatial.TileId,System.Collections.Generic.IEnumerable{Microsoft.Geospatial.TileLevelOfDetail})">
      <summary>
            Calculate the id of the tile that is one level of detail up from 
            this tile.
            This method will return <see cref="F:Microsoft.Geospatial.TileId.Null" /> if 
            this tile has no parents.
            </summary>
      <returns>Parent tile id</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.TryGetParent(Microsoft.Geospatial.TileId,System.Collections.Generic.IEnumerable{Microsoft.Geospatial.TileLevelOfDetail},Microsoft.Geospatial.TileId@)">
      <summary>
            Try to calculate the id of the tile that is one level of detail up 
            from this tile, on condition that this parent tile is a valid Lod. If not, keep getting
            the grand parents till finding one with valid lod.
            </summary>
      <returns>True if managed to get the parent, false otherwise</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.TryGetParent(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileLevelOfDetail,Microsoft.Geospatial.TileId@)">
      <summary>
            Try to calculate the id of the tile that is one level of detail up from this tile, on condition that this parent tile is a valid
            level of detail. If not, keep getting the grand parents until finding one that matches the valid level of detail.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.TryGetParent(Microsoft.Geospatial.TilePosition,System.Int16,Microsoft.Geospatial.TilePosition@)">
      <summary>
            Gets the parent of the specified TilePosition using the given delta.
            </summary>
      <returns>true if the parent exists</returns>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.IsParentOf(Microsoft.Geospatial.TilePosition,Microsoft.Geospatial.TilePosition)">
      <summary>
            Returns true if the TilePosition is a parent of the specified TilePosition.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetChildren(Microsoft.Geospatial.TileId,Microsoft.Geospatial.TileId[])">
      <summary>
            Fills out the specified array with the immediate children of this tile.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.GetQuadKey(Microsoft.Geospatial.TilePosition)">
      <summary>
            Creates the quad key string for the TilePosition.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.TileOperations.TryGetChildren(Microsoft.Geospatial.TileId,System.Collections.Generic.IEnumerable{Microsoft.Geospatial.TileLevelOfDetail},Microsoft.Geospatial.TileId[]@)">
      <summary>
            Calculate the children TileIds that have valid Lod from the current TileId.
            </summary>
      <returns>True if managed to get the children, false otherwise</returns>
    </member>
    <member name="T:Microsoft.Geospatial.VectorMath.Vector2D">
      <summary>
            Describes and manipulates a vector in two-dimensional space using doubles.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.VectorMath.Vector2D.Empty">
      <summary>
            Retrieves an empty 2-D vector.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.VectorMath.Vector2D.X">
      <summary>
            Represents the x component of the 2-D vector.
            </summary>
    </member>
    <member name="F:Microsoft.Geospatial.VectorMath.Vector2D.Y">
      <summary>
            Represents the y component of the 2-D vector.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Geospatial.VectorMath.Vector2D" /> structure.
            </summary>
      <param name="x">
      </param>
      <param name="y">
      </param>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.AddTo(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Adds a 2-D vector to the current vector.
            </summary>
      <param name="right">
      </param>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Add(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Adds two 2-D vectors together and returns the result.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.SubtractFrom(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Subtracts a 2-D vector from the current vector.
            </summary>
      <param name="right">
      </param>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Subtract(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Subtracts two 2-D vectors from one another and returns the result.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.MultiplyBy(System.Double)">
      <summary>
            Multiplies a 2-D vector by a value.
            </summary>
      <param name="value">Source value used as a multiplier.</param>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Multiply(Microsoft.Geospatial.VectorMath.Vector2D,System.Double)">
      <summary>
            Multiplies a 2-D vector by a value.
            </summary>
      <param name="source">Source vector structure.</param>
      <param name="value">Source value used as a multiplier.</param>
      <returns>A vector structure that is multiplied by the value.</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Normalize">
      <summary>
            Normalizes the current 2-D vector.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Minimize(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Minimize by the given vector
            </summary>
      <param name="toMinimize">The vector to minimize</param>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Maximize(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Maximize by the given vector
            </summary>
      <param name="toMaximize">The vector to maximize by</param>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Normalize(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Returns the normalized version of the specified 2-D vector.
            </summary>
      <param name="vector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Distance(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Returns the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
      <param name="pointA">
      </param>
      <param name="pointB">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.DistanceSq(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Returns the square of the distance between two vectors, assuming that those vectors represent points.
            Put another way, returns |pointA - pointB|.
            </summary>
      <param name="pointA">
      </param>
      <param name="pointB">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.DistanceToSegment(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D,System.Double@)">
      <summary>
            Calculates how far along a line segment a point is.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Length">
      <summary>
            Returns the length of the current 2-D vector.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Length(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Returns the length of the specified 2-D vector.
            </summary>
      <param name="vector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.LengthSq">
      <summary>
            Returns the square of the length of the current 2-D vector.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.LengthSq(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Returns the square of the length of the specified 2-D vector.
            </summary>
      <param name="vector">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Cross(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Returns the 2D cross product of two vectors.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Cross(Microsoft.Geospatial.VectorMath.Vector2D@,Microsoft.Geospatial.VectorMath.Vector2D@)">
      <summary>
            Returns the 2D cross product of two vectors.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.op_Addition(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Adds two 2-D vectors.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.op_Subtraction(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Subtracts a 2-D vector from another 2-D vector.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.op_Multiply(Microsoft.Geospatial.VectorMath.Vector2D,System.Double)">
      <summary>
            Multiplies a vector by a scalar
            </summary>
      <param name="left">Vector operand</param>
      <param name="right">Scalar operand</param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.op_Multiply(System.Double,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            multiplies vector by scalar
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.op_Multiply(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Dot product operator
            </summary>
      <param name="vec0">
      </param>
      <param name="vec1">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.op_Division(Microsoft.Geospatial.VectorMath.Vector2D,System.Double)">
      <summary>
            Divides a vector by a scalar
            </summary>
      <param name="left">Vector operand</param>
      <param name="right">Scalar operand</param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.TransformCoordinate(Microsoft.Geospatial.VectorMath.Vector3D,Microsoft.Geospatial.VectorMath.Matrix4x4D)">
      <summary>
            Transforms a 2-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
      <param name="vector">
      </param>
      <param name="matrix">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.TransformCoordinate(Microsoft.Geospatial.VectorMath.Vector3D@,Microsoft.Geospatial.VectorMath.Matrix4x4D@)">
      <summary>
            Transforms a 2-D vector by a given matrix, projecting the result back into w = 1.
            </summary>
      <param name="vector">
      </param>
      <param name="matrix">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Dot(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Get the dot product of the vectors.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Dot(Microsoft.Geospatial.VectorMath.Vector2D@,Microsoft.Geospatial.VectorMath.Vector2D@)">
      <summary>
            Get the dot product of the vectors.
            </summary>
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.GetAngle(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Calculates the angle in radians between two 2D vectors.
            </summary>
      <param name="a">
      </param>
      <param name="b">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.GetNormalVector(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Returns a vector normal to this vector.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.op_Equality(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Compares two <see cref="T:Microsoft.Geospatial.VectorMath.Vector2D" /> structures for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.op_Inequality(Microsoft.Geospatial.VectorMath.Vector2D,Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Compares two <see cref="T:Microsoft.Geospatial.VectorMath.Vector2D" /> structures for inequality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Equals(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Compares two <see cref="T:Microsoft.Geospatial.VectorMath.Vector2D" /> structures for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Equals(Microsoft.Geospatial.VectorMath.Vector2D@)">
      <summary>
            Compares two <see cref="T:Microsoft.Geospatial.VectorMath.Vector2D" /> structures for equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.NearlyEquals(Microsoft.Geospatial.VectorMath.Vector2D,System.Double)">
      <summary>
            Compares two <see cref="T:Microsoft.Geospatial.VectorMath.Vector2D" /> structures for near equality.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:Microsoft.Geospatial.VectorMath.Vector2D" /> and whether it contains the same values as this <see cref="T:Microsoft.Geospatial.VectorMath.Vector2D" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.GetHashCode">
      <summary>
            Returns the hash code for this <see cref="T:Microsoft.Geospatial.VectorMath.Vector2D" />.
            </summary>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Add(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Add this vector and the passed-in vector
            </summary>
      <param name="vec">Right hand side of add operation</param>
      <returns>Sum of this vector and the argument vector</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Subtract(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Subtract a vector from this vector
            </summary>
      <param name="vec">Right hand side of subtract operation</param>
      <returns>A copy of this vector with the argument vector subtracted from it</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Multiply(System.Double)">
      <summary>
            Return the result of scaling the current vector
            </summary>
      <param name="s">Scaling factor</param>
      <returns>A copy of this vector, scaled by s</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Dot(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Return the dot product of this vector with the passed-in vector
            </summary>
      <param name="vec">Right hand side of dot product operation</param>
      <returns>Dot product of the two vectors</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Negate">
      <summary>
            Get a copy of this vector multiplied by -1
            </summary>
      <returns>A copy of this vector, negated</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Min(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Return a new vector that, for each entry, contains the minimal corresponding element of the two vectors
            </summary>
      <param name="vec">Vector to minimize this vector with respect to</param>
      <returns>New vector containing the minimal of the two vectors at each element</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Max(Microsoft.Geospatial.VectorMath.Vector2D)">
      <summary>
            Return a new vector that, for each entry, contains the maximal corresponding element of the two vectors
            </summary>
      <param name="vec">Vector to minimize this vector with respect to</param>
      <returns>New vector containing the maximal of the two vectors at each element</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Lerp(Microsoft.Geospatial.VectorMath.Vector2D,System.Double)">
      <summary>
            Linearly interpolate from this vector to the passed-in vector
            </summary>
      <param name="vec">
      </param>
      <param name="w">Interpolation weight</param>
      <returns>Result of the interpolation</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Minimal">
      <summary>
            Get the minimal element of this vector
            </summary>
      <returns>Minimal element</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.Maximal">
      <summary>
            Get the maximal element of this vector
            </summary>
      <returns>Maximal element</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.AbsMinimal">
      <summary>
            Get the minimal of the absolute values of the elements of this vector
            </summary>
      <returns>Minimal of element absolute values</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.AbsMaximal">
      <summary>
            Get the maximal of the absolute values of the elements of this vector
            </summary>
      <returns>Maximal of element absolute values</returns>
    </member>
    <member name="M:Microsoft.Geospatial.VectorMath.Vector2D.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
    </member>
  </members>
</doc>